-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCPPGrammar where
import AbsCPPGrammar
import LexCPPGrammar
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pType Type
%name pArg Arg
%name pStmt Stmt
%name pListVar ListVar
%name pListStmt ListStmt
%name pVar Var
%name pQConst QConst
%name pQCElem QCElem
%name pListQCElem ListQCElem
%name pLit Lit
%name pListString ListString
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pListExp16 ListExp16
%name pListExp ListExp
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'char' { PT _ (TS _ 34) }
  'const' { PT _ (TS _ 35) }
  'do' { PT _ (TS _ 36) }
  'double' { PT _ (TS _ 37) }
  'else' { PT _ (TS _ 38) }
  'for' { PT _ (TS _ 39) }
  'if' { PT _ (TS _ 40) }
  'int' { PT _ (TS _ 41) }
  'return' { PT _ (TS _ 42) }
  'throw' { PT _ (TS _ 43) }
  'typedef' { PT _ (TS _ 44) }
  'using' { PT _ (TS _ 45) }
  'void' { PT _ (TS _ 46) }
  'while' { PT _ (TS _ 47) }
  '{' { PT _ (TS _ 48) }
  '||' { PT _ (TS _ 49) }
  '}' { PT _ (TS _ 50) }

L_charac { PT _ (TC $$) }
L_doubl  { PT _ (TD $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsCPPGrammar.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStmt '}' { AbsCPPGrammar.DFunction $1 $2 $4 (reverse $7) }
    | 'using' QConst { AbsCPPGrammar.DQConst $2 }
    | 'typedef' Stmt { AbsCPPGrammar.DStmt $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Type :: { Type }
Type : 'int' { AbsCPPGrammar.Type_int }
     | 'bool' { AbsCPPGrammar.Type_bool }
     | 'char' { AbsCPPGrammar.Type_char }
     | 'double' { AbsCPPGrammar.Type_double }
     | 'void' { AbsCPPGrammar.Type_void }
     | QConst { AbsCPPGrammar.TypeQConst $1 }
     | Type '&' { AbsCPPGrammar.Type1 $1 }
Arg :: { Arg }
Arg : Type { AbsCPPGrammar.AType $1 }
    | Type Id { AbsCPPGrammar.AId $1 $2 }
    | Type Id '=' Exp { AbsCPPGrammar.AExp $1 $2 $4 }
    | 'const' Type Id { AbsCPPGrammar.AConst $2 $3 }
Stmt :: { Stmt }
Stmt : Exp ';' { AbsCPPGrammar.SExp $1 }
     | 'return' Exp ';' { AbsCPPGrammar.SRet $2 }
     | Type ListVar ';' { AbsCPPGrammar.SVarDecl $1 $2 }
     | 'const' Type ListVar ';' { AbsCPPGrammar.SVarDecc $2 $3 }
     | 'while' '(' Exp ')' Stmt { AbsCPPGrammar.SWhile $3 $5 }
     | 'do' Stmt 'while' '(' Exp ')' { AbsCPPGrammar.SDoWhile $2 $5 }
     | 'for' '(' Arg ';' Exp ';' Exp ')' Stmt { AbsCPPGrammar.SFor $3 $5 $7 $9 }
     | 'if' '(' Exp ')' Stmt { AbsCPPGrammar.SIf $3 $5 }
     | 'if' '(' Exp ')' Stmt 'else' Stmt { AbsCPPGrammar.SIfElse $3 $5 $7 }
     | '{' ListStmt '}' { AbsCPPGrammar.SBlock (reverse $2) }
     | ';' { AbsCPPGrammar.SFun }
     | 'typedef' Type Id ';' { AbsCPPGrammar.STDef $2 $3 }
ListVar :: { [Var] }
ListVar : Var { (:[]) $1 } | Var ',' ListVar { (:) $1 $3 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Var :: { Var }
Var : Id { AbsCPPGrammar.Vreserve $1 }
    | Id '=' Exp { AbsCPPGrammar.Vinit $1 $3 }
QConst :: { QConst }
QConst : ListQCElem { AbsCPPGrammar.QConstDef $1 }
QCElem :: { QCElem }
QCElem : Id { AbsCPPGrammar.Qconstelem $1 }
ListQCElem :: { [QCElem] }
ListQCElem : QCElem { (:[]) $1 }
           | QCElem '::' ListQCElem { (:) $1 $3 }
Lit :: { Lit }
Lit : Char { AbsCPPGrammar.LChar $1 }
    | Double { AbsCPPGrammar.LDouble $1 }
    | Integer { AbsCPPGrammar.LInt $1 }
    | ListString { AbsCPPGrammar.Lstring $1 }
ListString :: { [String] }
ListString : {- empty -} { [] } | String ListString { (:) $1 $2 }
Exp16 :: { Exp }
Exp16 : Id { AbsCPPGrammar.EId $1 }
      | Lit { AbsCPPGrammar.Elit $1 }
      | QConst { AbsCPPGrammar.EQualConst $1 }
      | '(' Exp ')' { $2 }
Exp15 :: { Exp }
Exp15 : Exp15 '[' Exp ']' { AbsCPPGrammar.Eindex $1 $3 }
      | Exp15 '(' ListExp ')' { AbsCPPGrammar.Efun $1 $3 }
      | Exp16 { $1 }
Exp14 :: { Exp }
Exp14 : Exp13 '.' Exp14 { AbsCPPGrammar.EStProjDot $1 $3 }
      | Exp13 '->' Exp14 { AbsCPPGrammar.EStProjArr $1 $3 }
      | Exp14 '++' { AbsCPPGrammar.EIncr $1 }
      | Exp14 '--' { AbsCPPGrammar.EDecr $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp13 { AbsCPPGrammar.EIncrPre $2 }
      | '--' Exp13 { AbsCPPGrammar.EIncrPre $2 }
      | '*' Exp13 { AbsCPPGrammar.EDerefer $2 }
      | '!' Exp13 { AbsCPPGrammar.ENeg $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp11 '*' Exp12 { AbsCPPGrammar.EMul $1 $3 }
      | Exp11 '/' Exp12 { AbsCPPGrammar.EDiv $1 $3 }
      | Exp11 '%' Exp12 { AbsCPPGrammar.ERem $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp10 '+' Exp11 { AbsCPPGrammar.EAdd $1 $3 }
      | Exp10 '-' Exp11 { AbsCPPGrammar.ESub $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsCPPGrammar.ELShift $1 $3 }
      | Exp10 '>>' Exp11 { AbsCPPGrammar.ERShift $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp8 '<=' Exp9 { AbsCPPGrammar.ECompLeq $1 $3 }
     | Exp8 '>=' Exp9 { AbsCPPGrammar.ECompGeq $1 $3 }
     | Exp8 '<' Exp9 { AbsCPPGrammar.ECompLess $1 $3 }
     | Exp8 '>' Exp9 { AbsCPPGrammar.ECompGtr $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp7 '==' Exp8 { AbsCPPGrammar.EEq $1 $3 }
     | Exp7 '!=' Exp8 { AbsCPPGrammar.EInEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp3 '&&' Exp4 { AbsCPPGrammar.ECon $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp2 '||' Exp3 { AbsCPPGrammar.EDis $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsCPPGrammar.EAss $1 $3 }
     | Exp3 '+=' Exp2 { AbsCPPGrammar.EAssAdd $1 $3 }
     | Exp3 '-=' Exp2 { AbsCPPGrammar.EAssSub $1 $3 }
     | Exp3 '?' Exp2 ':' Exp2 { AbsCPPGrammar.ECond $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp { AbsCPPGrammar.EThrow $2 } | Exp2 { $1 }
ListExp16 :: { [Exp] }
ListExp16 : {- empty -} { [] }
          | Exp16 { (:[]) $1 }
          | Exp16 ',' ListExp16 { (:) $1 $3 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}


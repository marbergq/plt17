{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintCPPGrammar where

-- pretty-printer generated by the BNF converter

import AbsCPPGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)
  closingOrPunctuation [c] = c `elem` ")],;"
  closingOrPunctuation _   = False

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Id where
  prt _ (Id i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    PDefs defs -> prPrec i 0 (concatD [prt 0 defs])

instance Print Def where
  prt i e = case e of
    DFunction type_ id args stmts -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "{"), prt 0 stmts, doc (showString "}")])
    DQConst qconst -> prPrec i 0 (concatD [doc (showString "using"), prt 0 qconst])
    DStmt stmt -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 stmt])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Type where
  prt i e = case e of
    Type_int -> prPrec i 0 (concatD [doc (showString "int")])
    Type_bool -> prPrec i 0 (concatD [doc (showString "bool")])
    Type_char -> prPrec i 0 (concatD [doc (showString "char")])
    Type_double -> prPrec i 0 (concatD [doc (showString "double")])
    Type_void -> prPrec i 0 (concatD [doc (showString "void")])
    TypeQConst qconst -> prPrec i 0 (concatD [prt 0 qconst])
    Type1 type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&")])

instance Print Arg where
  prt i e = case e of
    AType type_ -> prPrec i 0 (concatD [prt 0 type_])
    AId type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    AExp type_ id exp -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "="), prt 0 exp])
    AConst type_ id -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Stmt where
  prt i e = case e of
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    SRet exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    SVarDecl type_ vars -> prPrec i 0 (concatD [prt 0 type_, prt 0 vars, doc (showString ";")])
    SVarDecc type_ vars -> prPrec i 0 (concatD [doc (showString "const"), prt 0 type_, prt 0 vars, doc (showString ";")])
    SWhile exp stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmt])
    SDoWhile stmt exp -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stmt, doc (showString "while"), doc (showString "("), prt 0 exp, doc (showString ")")])
    SFor arg exp1 exp2 stmt -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 arg, doc (showString ";"), prt 0 exp1, doc (showString ";"), prt 0 exp2, doc (showString ")"), prt 0 stmt])
    SIf exp stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmt])
    SIfElse exp stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 exp, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    SBlock stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SFun -> prPrec i 0 (concatD [doc (showString ";")])
    STDef type_ id -> prPrec i 0 (concatD [doc (showString "typedef"), prt 0 type_, prt 0 id, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Var where
  prt i e = case e of
    Vreserve id -> prPrec i 0 (concatD [prt 0 id])
    Vinit id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 exp])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print QConst where
  prt i e = case e of
    QConstDef qcelems -> prPrec i 0 (concatD [prt 0 qcelems])

instance Print QCElem where
  prt i e = case e of
    Qconstelem id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "::"), prt 0 xs])
instance Print Lit where
  prt i e = case e of
    LChar c -> prPrec i 0 (concatD [prt 0 c])
    LDouble d -> prPrec i 0 (concatD [prt 0 d])
    LInt n -> prPrec i 0 (concatD [prt 0 n])
    Lstring strs -> prPrec i 0 (concatD [prt 0 strs])

instance Print Exp where
  prt i e = case e of
    EId id -> prPrec i 16 (concatD [prt 0 id])
    Elit lit -> prPrec i 16 (concatD [prt 0 lit])
    EQualConst qconst -> prPrec i 16 (concatD [prt 0 qconst])
    Eindex exp1 exp2 -> prPrec i 15 (concatD [prt 15 exp1, doc (showString "["), prt 0 exp2, doc (showString "]")])
    Efun exp exps -> prPrec i 15 (concatD [prt 15 exp, doc (showString "("), prt 0 exps, doc (showString ")")])
    EStProjDot exp1 exp2 -> prPrec i 14 (concatD [prt 13 exp1, doc (showString "."), prt 14 exp2])
    EStProjArr exp1 exp2 -> prPrec i 14 (concatD [prt 13 exp1, doc (showString "->"), prt 14 exp2])
    EIncr exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "++")])
    EDecr exp -> prPrec i 14 (concatD [prt 14 exp, doc (showString "--")])
    EIncrPre exp -> prPrec i 13 (concatD [doc (showString "++"), prt 13 exp])
    EDerefer exp -> prPrec i 13 (concatD [doc (showString "*"), prt 13 exp])
    ENeg exp -> prPrec i 13 (concatD [doc (showString "!"), prt 13 exp])
    EMul exp1 exp2 -> prPrec i 12 (concatD [prt 11 exp1, doc (showString "*"), prt 12 exp2])
    EDiv exp1 exp2 -> prPrec i 12 (concatD [prt 11 exp1, doc (showString "/"), prt 12 exp2])
    ERem exp1 exp2 -> prPrec i 12 (concatD [prt 11 exp1, doc (showString "%"), prt 12 exp2])
    EAdd exp1 exp2 -> prPrec i 11 (concatD [prt 10 exp1, doc (showString "+"), prt 11 exp2])
    ESub exp1 exp2 -> prPrec i 11 (concatD [prt 10 exp1, doc (showString "-"), prt 11 exp2])
    ELShift exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "<<"), prt 11 exp2])
    ERShift exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString ">>"), prt 11 exp2])
    ECompLeq exp1 exp2 -> prPrec i 9 (concatD [prt 8 exp1, doc (showString "<="), prt 9 exp2])
    ECompGeq exp1 exp2 -> prPrec i 9 (concatD [prt 8 exp1, doc (showString ">="), prt 9 exp2])
    ECompLess exp1 exp2 -> prPrec i 9 (concatD [prt 8 exp1, doc (showString "<"), prt 9 exp2])
    ECompGtr exp1 exp2 -> prPrec i 9 (concatD [prt 8 exp1, doc (showString ">"), prt 9 exp2])
    EEq exp1 exp2 -> prPrec i 8 (concatD [prt 7 exp1, doc (showString "=="), prt 8 exp2])
    EInEq exp1 exp2 -> prPrec i 8 (concatD [prt 7 exp1, doc (showString "!="), prt 8 exp2])
    ECon exp1 exp2 -> prPrec i 4 (concatD [prt 3 exp1, doc (showString "&&"), prt 4 exp2])
    EDis exp1 exp2 -> prPrec i 3 (concatD [prt 2 exp1, doc (showString "||"), prt 3 exp2])
    EAss exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "="), prt 2 exp2])
    EAssAdd exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "+="), prt 2 exp2])
    EAssSub exp1 exp2 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "-="), prt 2 exp2])
    ECond exp1 exp2 exp3 -> prPrec i 2 (concatD [prt 3 exp1, doc (showString "?"), prt 2 exp2, doc (showString ":"), prt 2 exp3])
    EThrow exp -> prPrec i 1 (concatD [doc (showString "throw"), prt 0 exp])
  prtList 16 [] = (concatD [])
  prtList 16 [x] = (concatD [prt 16 x])
  prtList 16 (x:xs) = (concatD [prt 16 x, doc (showString ","), prt 16 xs])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])


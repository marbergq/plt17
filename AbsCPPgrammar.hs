

module AbsCPPgrammar where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFunction Type Id [Arg] [Stmt]
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_int
    | Type_bool
    | Type_char
    | Type_double
    | Type_void
    | Type_string
    | TypeQConst QConst
  deriving (Eq, Ord, Show, Read)

data Arg = ADef Type Id
  deriving (Eq, Ord, Show, Read)

data Stmt = SExp Exp | SRet Exp
  deriving (Eq, Ord, Show, Read)

data QConst = QConstDef [QCElem]
  deriving (Eq, Ord, Show, Read)

data QCElem = Qconstelem Id
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EChar Char
    | EDouble Double
    | EId Id
    | Estring String
    | EQualConst QConst
    | ELShift Exp Exp
    | ERShift Exp Exp
  deriving (Eq, Ord, Show, Read)


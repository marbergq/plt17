

module AbsCPPGrammar where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFunction Type Id [Arg] [Stmt] | DQConst QConst | DStmt Stmt
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_int
    | Type_bool
    | Type_char
    | Type_double
    | Type_void
    | TypeQConst QConst
    | Type1 Type
  deriving (Eq, Ord, Show, Read)

data Arg
    = AType Type | AId Type Id | AExp Type Id Exp | AConst Type Id
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SExp Exp
    | SRet Exp
    | SVarDecl Type [Var]
    | SVarDecc Type [Var]
    | SWhile Exp Stmt
    | SDoWhile Stmt Exp
    | SFor Arg Exp Exp Stmt
    | SIf Exp Stmt
    | SIfElse Exp Stmt Stmt
    | SBlock [Stmt]
    | SFun
    | STDef Type Id
  deriving (Eq, Ord, Show, Read)

data Var = Vreserve Id | Vinit Id Exp
  deriving (Eq, Ord, Show, Read)

data QConst = QConstDef [QCElem]
  deriving (Eq, Ord, Show, Read)

data QCElem = Qconstelem Id
  deriving (Eq, Ord, Show, Read)

data Lit
    = LChar Char | LDouble Double | LInt Integer | Lstring [String]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EId Id
    | Elit Lit
    | EQualConst QConst
    | Eindex Exp Exp
    | Efun Exp [Exp]
    | EStProjDot Exp Exp
    | EStProjArr Exp Exp
    | EIncr Exp
    | EDecr Exp
    | EIncrPre Exp
    | EDerefer Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ERem Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ECompLeq Exp Exp
    | ECompGeq Exp Exp
    | ECompLess Exp Exp
    | ECompGtr Exp Exp
    | EEq Exp Exp
    | EInEq Exp Exp
    | ECon Exp Exp
    | EDis Exp Exp
    | EAss Exp Exp
    | EAssAdd Exp Exp
    | EAssSub Exp Exp
    | ECond Exp Exp Exp
    | EThrow Exp
  deriving (Eq, Ord, Show, Read)


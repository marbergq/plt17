-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCPPgrammar where
import AbsCPPgrammar
import LexCPPgrammar
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pListStmt ListStmt
%name pType Type
%name pArg Arg
%name pStmt Stmt
%name pQConst QConst
%name pQCElem QCElem
%name pListQCElem ListQCElem
%name pExp16 Exp16
%name pExp10 Exp10
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp8 Exp8
%name pExp9 Exp9
%name pExp11 Exp11
%name pExp12 Exp12
%name pExp13 Exp13
%name pExp14 Exp14
%name pExp15 Exp15
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '::' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '<<' { PT _ (TS _ 6) }
  '>>' { PT _ (TS _ 7) }
  'bool' { PT _ (TS _ 8) }
  'char' { PT _ (TS _ 9) }
  'double' { PT _ (TS _ 10) }
  'int' { PT _ (TS _ 11) }
  'return' { PT _ (TS _ 12) }
  'string' { PT _ (TS _ 13) }
  'void' { PT _ (TS _ 14) }
  '{' { PT _ (TS _ 15) }
  '}' { PT _ (TS _ 16) }

L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsCPPgrammar.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStmt '}' { AbsCPPgrammar.DFunction $1 $2 $4 (reverse $7) }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Type :: { Type }
Type : 'int' { AbsCPPgrammar.Type_int }
     | 'bool' { AbsCPPgrammar.Type_bool }
     | 'char' { AbsCPPgrammar.Type_char }
     | 'double' { AbsCPPgrammar.Type_double }
     | 'void' { AbsCPPgrammar.Type_void }
     | 'string' { AbsCPPgrammar.Type_string }
     | QConst { AbsCPPgrammar.TypeQConst $1 }
Arg :: { Arg }
Arg : Type Id { AbsCPPgrammar.ADef $1 $2 }
Stmt :: { Stmt }
Stmt : Exp ';' { AbsCPPgrammar.SExp $1 }
     | 'return' Exp ';' { AbsCPPgrammar.SRet $2 }
QConst :: { QConst }
QConst : ListQCElem { AbsCPPgrammar.QConstDef $1 }
QCElem :: { QCElem }
QCElem : Id { AbsCPPgrammar.Qconstelem $1 }
ListQCElem :: { [QCElem] }
ListQCElem : QCElem { (:[]) $1 }
           | QCElem '::' ListQCElem { (:) $1 $3 }
Exp16 :: { Exp }
Exp16 : Integer { AbsCPPgrammar.EInt $1 }
      | Char { AbsCPPgrammar.EChar $1 }
      | Double { AbsCPPgrammar.EDouble $1 }
      | Id { AbsCPPgrammar.EId $1 }
      | String { AbsCPPgrammar.Estring $1 }
      | QConst { AbsCPPgrammar.EQualConst $1 }
      | '(' Exp ')' { $2 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsCPPgrammar.ELShift $1 $3 }
      | Exp10 '>>' Exp11 { AbsCPPgrammar.ERShift $1 $3 }
      | Exp11 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : Exp10 { $1 }
Exp11 :: { Exp }
Exp11 : Exp12 { $1 }
Exp12 :: { Exp }
Exp12 : Exp13 { $1 }
Exp13 :: { Exp }
Exp13 : Exp14 { $1 }
Exp14 :: { Exp }
Exp14 : Exp15 { $1 }
Exp15 :: { Exp }
Exp15 : Exp16 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

